#!/bin/bash
txtbld=$(tput bold)              # Bold
bldred=${txtbld}$(tput setaf 1)  # red
bldgre=${txtbld}$(tput setaf 2)  # green
bldblu=${txtbld}$(tput setaf 3)  # blue
txtrst=$(tput sgr0)              # Reset

if ! grep  --quiet '.*[a-zA-Z0-9]-[0-9][0-9]*' $1  &&  ! grep -i --quiet 'build\|chore\|feat\|fix\|docs\|refactor\|perf\|style\|test' $1; then
  if grep --quiet [\ ]*Merge $1; then
      exit 0
  else
    echo "${bldred}Error: commit message neither have a valid JIRA ticket nor match Commit Guidelines ${txtrst}"
    echo "================"
    echo "${bldred}Commit Guidelines${txtrst}"
    echo "${bldred}A typical git commit message will look like <${bldgre}type${bldred}>(<${bldgre}scope${bldred}>): <${bldgre}subject${bldred}> ${txtrst}"
    echo -en '\n'
    echo "${bldred}'${bldgre}type${bldred}' should be one of the following:${txtrst}"
    echo "${bldred}    build : Build related changes${txtrst}"
    echo "${bldred}    chore : A code change that external user won't see${txtrst}"
    echo "${bldred}    feat  : A new feature${txtrst}"
    echo "${bldred}    fix   : A bug fix${txtrst}"
    echo "${bldred}    docs  : Documentation related changes${txtrst}"
    echo "${bldred}    refactor : A code that neither fix bug nor adds a feature${txtrst}"
    echo "${bldred}    perf  : A code that improves performance${txtrst}"
    echo "${bldred}    style : A code that is related to styling${txtrst}"
    echo "${bldred}    test  : Adding new test or making changes to existing test${txtrst}"
    echo -en '\n'
    echo "${bldred}'${bldgre}scope${bldred}' is optional${txtrst}"
    echo "${bldred}    It should be noun and points to the section of the codebase such as init, config, etc${txtrst}"
    echo -en '\n'
    echo "${bldred}'${bldgre}subject${bldred}'${txtrst}"
    echo "${bldred}    use imperative, present tense(eg: use 'add' instead of 'added' or 'adds')${txtrst}"
    echo "${bldred}    don't use dot(.) at the end${txtrst}"
    echo "${bldred}    don't capitalize first letter${txtrst}"
    echo "================"
    echo "${bldgre}Example: git commit -m \"[JIRA TICKET] <type>(<scope>): <subject>\"${txtrst}"
    echo "================"
    cat $1
    echo "================"
    echo "${bldred}To skip this error check, use ${bldblu}commit --no-verify${txtrst}"
    exit 1
  fi
fi


if ! grep  --quiet '.*[a-zA-Z0-9]-[0-9][0-9]*' $1; then
  if grep --quiet [\ ]*Merge $1; then
      exit 0
  else
    echo "${bldred}Error: commit message doesn't have a valid JIRA ticket${txtrst}"
    echo "${bldgre}Example: git commit -m \"[JIRA TICKET] <type>(<scope>): <subject>\"${txtrst}"
    echo "================"
    cat $1
    echo "================"
    echo "${bldred}To skip this error check, use ${bldblu}commit --no-verify${txtrst}"
    exit 1
  fi
fi

if ! grep -i  --quiet 'build\|chore\|feat\|fix\|docs\|refactor\|perf\|style\|test' $1; then
  if grep --quiet [\ ]*Merge $1; then
      exit 0
  else
    echo "${bldred}Error: commit message doesn't match Commit Guidelines ${txtrst}"
    echo "================"
    echo "${bldred}Commit Guidelines${txtrst}"
    echo "${bldred}A typical git commit message will look like <${bldgre}type${bldred}>(<${bldgre}scope${bldred}>): <${bldgre}subject${bldred}> ${txtrst}"
    echo -en '\n'
    echo "${bldred}'${bldgre}type${bldred}' should be one of the following:${txtrst}"
    echo "${bldred}    build : Build related changes${txtrst}"
    echo "${bldred}    chore : A code change that external user won't see${txtrst}"
    echo "${bldred}    feat  : A new feature${txtrst}"
    echo "${bldred}    fix   : A bug fix${txtrst}"
    echo "${bldred}    docs  : Documentation related changes${txtrst}"
    echo "${bldred}    refactor : A code that neither fix bug nor adds a feature${txtrst}"
    echo "${bldred}    perf  : A code that improves performance${txtrst}"
    echo "${bldred}    style : A code that is related to styling${txtrst}"
    echo "${bldred}    test  : Adding new test or making changes to existing test${txtrst}"
    echo -en '\n'
    echo "${bldred}'${bldgre}scope${bldred}' is optional${txtrst}"
    echo "${bldred}    It should be noun and points to the section of the codebase such as init, config, etc${txtrst}"
    echo -en '\n'
    echo "${bldred}'${bldgre}subject${bldred}'${txtrst}"
    echo "${bldred}    use imperative, present tense(eg: use 'add' instead of 'added' or 'adds')${txtrst}"
    echo "${bldred}    don't use dot(.) at the end${txtrst}"
    echo "${bldred}    don't capitalize first letter${txtrst}"
    echo "================"
    echo "${bldgre}Example: git commit -m \"[JIRA TICKET] <type>(<scope>): <subject>\"${txtrst}"
    echo "================"
    cat $1
    echo "================"
    echo "${bldred}To skip this error check, use ${bldblu}commit --no-verify${txtrst}"
    exit 1
  fi
fi

if  [[ $(git config --get user.email) != *"tigergraph.com"* ]]; then
    echo "${bldred}Error : user or email is not a valid tigergraph account${txtrst}"
    echo "${bldbld} USER : $(git config --get user.name)${txtrst}"
    echo "${bldbld} EMAIL: $(git config --get user.email)${txtrst}"
    echo "${bldred}Fix this for all the repos by:${$txtrst}"
    echo "${bldblu}        git config --global user.name  {your name}${txtrst}"
    echo "${bldblu}        git config --global user.email {your email}${txtrst}"
    echo "${bldred}or for this repo. only:${txtrst}"
    echo "${bldblu}        git config user.name  {your name}${txtrst}"
    echo "${bldblu}        git config user.email {your email}${txtrst}"
    exit 1
fi
